#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use Data::Dumper;
use Getopt::Long qw( :config bundling no_ignore_case );

use Nmap::Parser 1.34;
use Excel::Writer::XLSX;

my ($input, $output, $verbose, $help, $quiet, $excel, $up, $masscan, $database);
my ($dbtype, $dbname, $dbhost, $dbport, $dbuser, $dbpass);
GetOptions(
	'h|help'		=>	\$help,
	'v|verbose+'	=>	\$verbose,
	'q|quiet'		=>	\$quiet,
	'i|input=s'		=>	\$input,
	'o|output=s'	=>	\$output,
	'e|excel'		=>	\$excel,
	'u|up'			=>	\$up,
	'm|masscan'		=>	\$masscan,
	't|type=s'		=>	\$dbtype,
	's|server=s'	=>	\$dbhost,
	'd|database=s'	=>	\$dbname,
	'P|port=s'		=>	\$dbport,
	'u|user=s'		=>	\$dbuser,
	'p|pass=s'		=>	\$dbpass,
);

$masscan = 0 unless($masscan);
$help = 0 unless($help);
$verbose = 0 unless($verbose);
$quiet = 0 unless($quiet);
$excel = 0 unless ($excel);
$up = 0 unless($up);

if ($help) { &usage(); }

if (($verbose) and ($quiet)) { print "Can't be both verbose and quiet.  Pick one."; exit 1; }

if (($dbtype) and (($dbtype ne 'mysql') or ($dbtype ne 'mssql'))) {
	print "Can only accept database types of mysql or MSSQL.\n";
	exit 1;
}

$dbport = 3306 unless($dbport);

if ($verbose) {
	print <<EOS;

#################
#  Input file:			$input
#  Database file:		$database
#  Is masscan?:			$masscan
#################
EOS
}

if ($masscan) {
	print "### NYI ###\n";
	exit 1;
} else {
	my $nmap = new Nmap::Parser;
	if (( -f $input ) and (! -d $input ) and (! -z $input )) {
		$nmap->parsefile($input);
		#print Dumper($nmap);
		my $sess = $nmap->get_session();
		my @nmap_hosts;
		if ($up) { @nmap_hosts = $nmap->all_hosts('up'); }
		else { @nmap_hosts = $nmap->all_hosts(); }
		if ($excel) {
			my $wb = Excel::Writer::XLSX->new($output);
			my $ws_summary = $wb->add_worksheet('Summary');
			my $ws_ports = $wb->add_worksheet('Port');

			my @summary_header_row = ('IP', 'Hostname', 'OS Guess', 'Accuracy', 'Host Status', 'Open Ports', 'Start Time - Epoc', 'Start Date', 'End Time - Epoch', 'End Date', 'Duration', 'MAC Address', 'MAC Vendor', 'Scripts');
			print Dumper(\@summary_header_row) if ($verbose);
			$ws_summary->write_row('A1', \@summary_header_row);
			my @ports_header_row = ('IP', 'Port Number', 'Protocol', 'Service', 'State', 'Reason', 'Scripts');
			$ws_ports->write_row('A1', \@ports_header_row);
			my $i = 2; my $j = 2;
			foreach my $h ( @nmap_hosts ) {
				my $os = $h->os_sig();
				my $port_str;
				my @tcpports = $h->tcp_open_ports();
				my @udpports = $h->udp_open_ports();
				if (scalar(@tcpports) > 0) {
					print "\@tcpports defined\n" if (($verbose) and ($verbose > 2));
					$port_str .= "T:".join("|", @tcpports);
				} else {
					print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
					print "No open TCP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
				}
				if (scalar(@udpports) > 0) {
					print "\@udpports defined\n" if (($verbose) and ($verbose > 2));
					$port_str .= "|".join("|", @udpports);
				} else {
					print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
					print "No open UDP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
				}
				if ((!defined($port_str)) or ($port_str eq '')) { $port_str = "No open ports found"; }
				my $duration = $sess->finish_time() - $sess->start_time();
				my $hostscripts;
				my @hs = $h->hostscripts();
				if (scalar(@hs) > 0) {
					foreach my $hs ( @hs ) {
						my $obj = $h->hostscripts($hs);
						#print Dumper($obj);
						$hostscripts .= "$hs=$obj->{'output'}\n";
					}
				}
				if ($hostscripts) { $hostscripts =~ s/\,/\|/g; }
				my @host_data_row = ( $h->ipv4_addr(), $h->hostname(), $os->name(), $os->name_accuracy(), $h->status(), $port_str, $sess->start_time(), $sess->start_str(), $sess->finish_time(), $sess->time_str(), $duration, $h->mac_addr(), $h->mac_vendor(), $hostscripts );
				$ws_summary->write_row("A".$i++, \@host_data_row);
				### port worksheet
				next unless (scalar(@tcpports) > 0);
				foreach my $p ( @tcpports ) {
					#print "Port => $p\n";
					my $svc = $h->tcp_service($p);
					my $script_str;
					my @ss = $svc->scripts();
					if (scalar(@ss) > 0) {
						foreach my $ss ( @ss ) {
							my $obj = $svc->scripts($ss);
							#print Dumper($obj);
							$script_str .= "$ss=$obj->{'output'}\n";
						}
					}
					my $proto;
					if (($svc->proto() eq '') or ($svc->proto() eq 'unknown')) { $proto = "tcp"; } 
					else { $proto = $svc->proto(); }
					my @port_data_row = ( $h->ipv4_addr(), $svc->port(), $proto, $svc->name(), 'open', $svc->method(), $script_str);
					$ws_ports->write_row("A".$j++, \@port_data_row);
				}
			}
			$wb->close();
		} elsif (($dbtype) and ($dbtype eq 'mysql')) {
			my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
			my $dbh = DBI->connect($dsn, $dbuser, $dbpass);
			# check if the database exsists
			my $drh = DBI->install_driver('mysql');
			my @dbs = $drh->func("$dbhost:$dbport", '_ListDBs');
			print Dumper(\@dbs);
			# check if the tables exist
		} else {
			# (default output to csv)
			open CSV, ">$output" or die "Couldn't open output file ($output): $!";
			print CSV "IP,Hostname,OS Guess,Accuracy,Host Status,Open Ports,Start Time\n";
			foreach my $h ( @nmap_hosts ) {
				print Dumper($h) if (($verbose) and ($verbose >= 3));
				my $os = $h->os_sig();
				my $port_str;
				my @tcpports = $h->tcp_open_ports();
				my @udpports = $h->udp_open_ports();
				if (scalar(@tcpports) > 0) {
					print "\@tcpports defined\n" if (($verbose) and ($verbose > 2));
					$port_str .= "T:".join("|", @tcpports);
				} else {
					print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
					print "No open TCP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
				}
				if (scalar(@udpports) > 0) {
					print "\@udpports defined\n" if (($verbose) and ($verbose > 2));
					$port_str .= "|".join("|", @udpports);
				} else {
					print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
					print "No open UDP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
				}
				$port_str = "No open ports found" unless ($port_str);
				print CSV $h->ipv4_addr().",".$h->hostname().",".$os->name.",".$os->name_accuracy().",".$h->status().",".$port_str.",".$sess->start_str()."\n";
			}
			close CSV or die "There was a problem closing the CSV file: $! ";
		}
	} else {
		if ( -z $input ) {
			die "Input file is zero (0) bytes.";
		} elsif ( -d $input ) {
			die "Specified input is a directory.";
		} elsif ( ! -f $input ) {
			die "Specified input is not a file.";
		}
	}
}

###############################################################################
### Subs
###############################################################################

sub usage {
	print <<EoS;

Convert nmap XML data to database format specified by command options.

Usage:
$0 -hvqmue -i <input_file> -o [output_file] -t [db_type] -s [db_host] -d [db_name] -u [db_user] -p [dp_pass]

Where:
-h|--help			Prints this message then exits.
-v|--verbose			Increase output volume.
-q|--quiet			Decrease output volume.
-u|--up				Only report on hosts that are "up".
-m|--masscan			Input file is from a masscan rather than nmap.
-e|--excel			Create a Microsoft Excel 2010 and later compatible Excel file.
-i|--input			Specify the full path to the input file.
-o|--output			Specify the full path to the output file.
-t|--type			Specify the database type.  Currently only accepts 'mysql' or 'MSSQL'.
-s|--server			Specify the database server.
-p|--port			Specify the port for the database server.  Defaults to 3306.
-d|--database			Specify the name for the database.  Defaults to 'nmap_data'.
-u|--user			Specify the username for the database.
-p|--pass			Specify the password for the database.

Note: Excel option on used with CSV output.
Note: All database options only used with mysql or mssql output.

EoS
	exit 0;
}
