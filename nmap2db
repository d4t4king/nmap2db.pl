#!/usr/bin/perl

use strict;
use warnings;
use feature qw( switch );

use DBI;
use Data::Dumper;
use Getopt::Long qw( :config bundling no_ignore_case );

use Nmap::Parser 1.34;
use Excel::Writer::XLSX;

my ($input, $output, $verbose, $help, $quiet, $excel, $up, $masscan, $database);
my ($dbtype, $dbname, $dbhost, $dbport, $dbuser, $dbpass);
GetOptions(
	'h|help'		=>	\$help,
	'v|verbose+'	=>	\$verbose,
	'q|quiet'		=>	\$quiet,
	'i|input=s'		=>	\$input,
	'o|output=s'	=>	\$output,
	'e|excel'		=>	\$excel,
	'u|up'			=>	\$up,
	'm|masscan'		=>	\$masscan,
	't|type=s'		=>	\$dbtype,
	's|server=s'	=>	\$dbhost,
	'd|database=s'	=>	\$dbname,
	'P|port=s'		=>	\$dbport,
	'u|user=s'		=>	\$dbuser,
	'p|pass=s'		=>	\$dbpass,
);

my %to_bool = ( 0 => 'false', 1 => 'true' );
$masscan = 0 unless($masscan);
$help = 0 unless($help);
$verbose = 0 unless($verbose);
$quiet = 0 unless($quiet);
$excel = 0 unless ($excel);
$up = 0 unless($up);

my %table_sql = (
	'nmap'			=> 'CREATE TABLE IF NOT EXISTS nmap (sid INT NOT NULL AUTO_INCREMENT, version VARCHAR(8), xmlversion VARCHAR(8), args VARCHAR(255), types VARCHAR(255), starttime DATETIME, startstr VARCHAR(255), endtime DATETIME, endstr VARCHAR(255), numservices INT, PRIMARY KEY (sid))',
	'hosts'			=> 'CREATE TABLE IF NOT EXISTS hosts (hid INT NOT NULL AUTO_INCREMENT, sid INT NOT NULL, ip4 VARCHAR(16), ip4num VARCHAR(255), hostname VARCHAR(255), status VARCHAR(255), tcpcount INT, udpcount INT, mac VARCHAR(24), vendor VARCHAR(255), ip6 VARCHAR(64), distance INT, uptime VARCHAR(255), upstr VARCHAR(255), PRIMARY KEY(hid))',
	'sequencing'	=> 'CREATE TABLE IF NOT EXISTS sequencing (seq_id INT NOT NULL AUTO_INCREMENT, hid INT NOT NULL, sid INT NOT NULL, tcpclass VARCHAR(255), tcpindex VARCHAR(255), tcpvalues VARCHAR(255), ipclass VARCHAR(255), ipvalues VARCHAR(255), tcptclass VARCHAR(255), tcptvalues VARCHAR(255), PRIMARY KEY(seq_id))',
	'ports'			=> 'CREATE TABLE IF NOT EXISTS ports (port_id INT NOT NULL AUTO_INCREMENT, hid INT NOT NULL, sid INT NOT NULL, port INT, type VARCHAR(255), state VARCHAR(255), name VARCHAR(255), tunnel VARCHAR(255), product VARCHAR(255), version VARCHAR(255), extra VARCHAR(255), confidence INT, method VARCHAR(255), proto VARCHAR(255), owner VARCHAR(255), rpcnum VARCHAR(255), fingerprint TEXT, PRIMARY KEY(port_id))',
	'os'			=> 'CREATE TABLE IF NOT EXISTS os (os_id INT NOT NULL AUTO_INCREMENT, hid INT NOT NULL, sid INT NOT NULL, name VARCHAR(255), family VARCHAR(255), generation VARCHAR(255), type VARCHAR(255), vendor VARCHAR(255), accuracy INT, PRIMARY KEY(os_id))',
);

if ($help) { &usage(); }

if (($verbose) and ($quiet)) { print "Can't be both verbose and quiet.  Pick one."; exit 1; }

if (($dbtype) and ($dbtype !~ /(?:mysql|mssql)/)) {
	print "Can only accept database types of mysql or mssql.\n";
	exit 1;
}

if ($dbtype) {
	if ($dbtype eq 'mysql') {
		$dbport = 3306 unless($dbport);
	} elsif ($dbtype eq 'mssql') {
		$dbport = 1433 unless($dbport);
	} elsif ($dbtype eq 'sqlite') {
		$dbport = 0;
	} else {
		die "Unrecognized DB type!";
	}
	$dbname = 'nmap_data' unless($dbname);
}

if ($verbose) {
	print <<EOS;

#################
#  Input file:			$input
#  Database file:		$dbname
#  Is masscan?:			$to_bool{$masscan}
#################

EOS
}

if ($masscan) {
	print "### NYI ###\n";
	exit 1;
} else {
	my $nmap = new Nmap::Parser;
	if (defined($input)) {
		if (( -f $input ) and (! -d $input ) and (! -z $input )) {
			$nmap->parsefile($input);
			#print Dumper($nmap);
			my $sess = $nmap->get_session();
			my @nmap_hosts;
			if ($up) { @nmap_hosts = $nmap->all_hosts('up'); }
			else { @nmap_hosts = $nmap->all_hosts(); }
			### start format parsing
			### excel
			if ($excel) {
				my $wb = Excel::Writer::XLSX->new($output);
				my $ws_summary = $wb->add_worksheet('Summary');
				my $ws_ports = $wb->add_worksheet('Port');
	
				my @summary_header_row = ('IP', 'Hostname', 'OS Guess', 'Accuracy', 'Host Status', 'Open Ports', 'Start Time - Epoc', 'Start Date', 'End Time - Epoch', 'End Date', 'Duration', 'MAC Address', 'MAC Vendor', 'Scripts');
				print Dumper(\@summary_header_row) if ($verbose);
				$ws_summary->write_row('A1', \@summary_header_row);
				my @ports_header_row = ('IP', 'Port Number', 'Protocol', 'Service', 'State', 'Reason', 'Scripts');
				$ws_ports->write_row('A1', \@ports_header_row);
				my $i = 2; my $j = 2;
				foreach my $h ( @nmap_hosts ) {
					my $os = $h->os_sig();
					my $port_str;
					my @tcpports = $h->tcp_open_ports();
					my @udpports = $h->udp_open_ports();
					if (scalar(@tcpports) > 0) {
						print "\@tcpports defined\n" if (($verbose) and ($verbose > 2));
						$port_str .= "T:".join("|", @tcpports);
					} else {
						print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
						print "No open TCP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
					}
					if (scalar(@udpports) > 0) {
						print "\@udpports defined\n" if (($verbose) and ($verbose > 2));
						$port_str .= "|".join("|", @udpports);
					} else {
						print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
						print "No open UDP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
					}
					if ((!defined($port_str)) or ($port_str eq '')) { $port_str = "No open ports found"; }
					my $duration = $sess->finish_time() - $sess->start_time();
					my $hostscripts;
					my @hs = $h->hostscripts();
					if (scalar(@hs) > 0) {
						foreach my $hs ( @hs ) {
							my $obj = $h->hostscripts($hs);
							#print Dumper($obj);
							$hostscripts .= "$hs=$obj->{'output'}\n";
						}
					}
					if ($hostscripts) { $hostscripts =~ s/\,/\|/g; }
					my @host_data_row = ( $h->ipv4_addr(), $h->hostname(), $os->name(), $os->name_accuracy(), $h->status(), $port_str, $sess->start_time(), $sess->start_str(), $sess->finish_time(), $sess->time_str(), $duration, $h->mac_addr(), $h->mac_vendor(), $hostscripts );
					$ws_summary->write_row("A".$i++, \@host_data_row);
					### port worksheet
					next unless (scalar(@tcpports) > 0);
					foreach my $p ( @tcpports ) {
						#print "Port => $p\n";
						my $svc = $h->tcp_service($p);
						my $script_str;
						my @ss = $svc->scripts();
						if (scalar(@ss) > 0) {
							foreach my $ss ( @ss ) {
								my $obj = $svc->scripts($ss);
								#print Dumper($obj);
								$script_str .= "$ss=$obj->{'output'}\n";
							}
						}
						my $proto;
						if (($svc->proto() eq '') or ($svc->proto() eq 'unknown')) { $proto = "tcp"; } 
						else { $proto = $svc->proto(); }
						my @port_data_row = ( $h->ipv4_addr(), $svc->port(), $proto, $svc->name(), 'open', $svc->method(), $script_str);
						$ws_ports->write_row("A".$j++, \@port_data_row);
					}
				}
				$wb->close();
			### mysql
			} elsif ($dbtype) {
				given ($dbtype) {
					when ('mysql') {
						# check the database exsists
						#my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
						my $dsn = "DBI:mysql:host=$dbhost:port=$dbport";
						my $dbh; my $rtv = 0; my $db_found = 0;
						eval { $dbh = DBI->connect($dsn, $dbuser, $dbpass); };
						if (($verbose) and ($verbose > 2)) { print "|\$\@|"; print Dumper($@); print "|\n"; }
						my $sth = $dbh->prepare("SHOW DATABASES;");
						$sth->execute();
						while (my $row = $sth->fetchrow_array()) {
							if (($verbose) and ($verbose > 2)) { print "|\$row|"; print Dumper($row); print "|\n"; }
							if ($row eq $dbname) { $db_found = 1; last; }
						}
						$sth->finish();
						if ($db_found) {
							print "Database found.\n" if ($verbose);
						} else {
							print "Database not found!  Must create.\n" if ($verbose);
							$rtv = $dbh->do("CREATE DATABASE $dbname;");
							print "CREATE DATABASE RTV: $rtv\n" if ($verbose);
						}
						$dbh->disconnect();
						# check if the tables exist (?)
						# blindly create them if they don't exist
						foreach my $tbl ( sort keys %table_sql ) {
							my $rtv = &create_table($tbl);
							print "CREATE TABLE ($tbl) RTV: $rtv\n" if (($verbose) and ($verbose > 1));
						}
						### create useful views -- TBD
						$dbh = DBI->connect($dsn, $dbuser, $dbpass);
						$rtv = $dbh->do("CREATE VIEW IF NOT EXIST vw_ports_on_host AS SELECT h.ip4,h.hostname,h.status,p.port,p.name,p.product,p.version,p.method,p.confidence,p.extra FROM hosts h INNER JOIN ports p ON h.hid=p.hid;");
						### process the nmap data
						# check if a session record already exists
						my $sid = &check_scan_record($sess->scan_args(), $sess->start_str(), $sess->Time_str());
						print "&check_scan_record(".$sess->scan_args().", ".$sess->start_str().", ".$sess->time_str().");\n" if ($verbose);
						print "SID: $sid\n" if ($verbose);
						if (($sid =~ /^\d+$/) and ($sid > 0)) {
							print "Scan record already exists.  SID = $sid\n" unless ($quiet);
						} else {	# add new session
							my %params = (
								'version'		=> $sess->nmap_version(),
								'xmlversion'	=> $sess->xml_version(),
								'args'			=> $sess->scan_args(),
								'types'			=> $sess->scan_types(),
								'starttime'		=> $sess->start_time(),
								'startstr'		=> $sess->start_str(),
								'endtime'		=> $sess->finish_time(),
								'endstr'		=> $sess->time_str(),
								'numservices'	=> $sess->numservices(),
							);
							print Dumper(\%params) if (($verbose) and ($verbose > 2));
							my $rtv = &insert_nmap_record(\%params);
							$sid = &check_scan_record($sess->scan_args(), $sess->start_str(), $sess->time_str());
							print "SID after insert: $sid\n" if (($verbose) and ($verbose > 1));
						}
						if (scalar(@nmap_hosts) == 0) {
							print "There are no hosts in this scan." unless ($quiet);
						} else {	# add new hosts
							foreach my $host ( @nmap_hosts ) {
								my $hid = 0;
								# check for a host record with this scan ID (sid) and
								# the same ip and hostname
								print "\&check_host_record($sid, ".$host->ipv4_addr().", ".$host->hostname().")\n" if ($verbose);
								$hid = &check_host_record($sid, $host->ipv4_addr(), $host->hostname());
								print "HID = $hid\n" if ($verbose);
								if ((!defined($hid)) or ($hid == 0)) {
									print "Host record not found, creating...\n" if ($verbose);
									print Dumper($host) if (($verbose) and ($verbose > 2));
									my %params = (
										'sid'				=>	$sid,
										'ip4'				=>	$host->ipv4_addr(),
										'ip4num'			=>	'[ip4num]',
										'hostname'			=>	$host->hostname(),
										'status'			=>	$host->status(),
										'tcpcount'			=>	$host->tcp_port_count(),
										'udpcount'			=>	$host->udp_port_count(),
										'mac_addr'			=>	$host->mac_addr(),
										'mac_vendor'		=>	$host->mac_vendor(),
										'ipv6_addr'			=>	$host->ipv6_addr(),
										'distance'			=>	$host->distance(),
										'uptime_secs'		=>	$host->uptime_seconds(),
										'uptime_lastboot'	=>	$host->uptime_lastboot(),
									);
									my $rtv = &insert_host_record(\%params);
									print "insert_host_record::RTV: $rtv\n" if ($verbose);
									$hid = &check_host_record($sid, $host->ipv4_addr(), $host->hostname());
								} else {
									# got a host id
									print "Host ID exists: $hid\n";
								}
								### check for a sequencing record with thie scan id and 
								### tcpsequence_class, tcpsequence_index, tcpsequence_values
								if (&record_exists($hid, $sid, 'sequencing', $host->tcpsequence_class())) {
									print "sequencing record exists for scan and host.  Skipping....\n" if ($verbose);
								} else {
									my %params = (
										'hid'					=>	$hid,
										'sid'					=>	$sid,
										'tcpsequence_class'		=>	$host->tcpsequence_class(),
										'tcpsequence_index'		=>	$host->tcpsequence_index(),
										'tcpsequence_values'	=>	$host->tcpsequence_values(),
										'ipidsequence_class'	=>	$host->ipidsequence_class(),
										'ipidsequence_values'	=>	$host->ipidsequence_values(),
										'tcptsequence_class'	=>	$host->tcptsequence_class(),
										'tcptsequence_values'	=>	$host->tcptsequence_values(),
									);
									my $rtv = &insert_seq_record(\%params);
									print "insert_seq_record::RTV: $rtv\n" if ($verbose);
								}
								### tcp open ports
								my @pnums = $host->tcp_open_ports();
								print join("|", @pnums)."\n" if (($verbose) && ($verbose > 2));
								if (scalar(@pnums) > 0) {
									foreach my $pnum ( sort @pnums ) {
										print "PORT: $pnum\n" if (($verbose) and ($verbose > 2));
										my $port_obj = $host->tcp_service($pnum);
										print Dumper($port_obj) if (($verbose) and ($verbose > 1));
										if (&check_port_record($hid, $sid, $pnum, 'open', $port_obj->proto())) {
											print "Port record exists for scan and host.  Skipping....\n" if ($verbose);
										} else {
											my %params = (
												'hid'				=>	$hid,
												'sid'				=>	$sid,
												'port_num'			=>	$pnum,
												''					=>	'',				### This was in the ruby version.  Not sure why or if it's needed here.
												'state'				=>	'open',			# we're only querying the host obj for open ports
												'service_name'		=>	$port_obj->name(),
												'service_tunnel'	=>	$port_obj->tunnel(),
												'product'			=>	$port_obj->product(),
												'version'			=>	$port_obj->version(),
												'extra'				=>	$port_obj->extrainfo(),
												'confidence'		=>	$port_obj->confidence(),
												'method'			=>	$port_obj->method(),
												'protocol'			=>	$port_obj->proto(),
												'owner'				=>	$port_obj->owner(),
												'rpcnum'			=>	$port_obj->rpcnum(),
												'fingerprint'		=>	$port_obj->fingerprint(),
											);
											my $rtv = &insert_ports_record(\%params);
											print "insert_ports_record::RTV: $rtv\n" if ($verbose);
										}
									}
								} else {
									print "TCP open port count is zero 0.\n" if (($verbose) and ($verbose > 1));
								}
								### udp open ports
								@pnums = $host->udp_open_ports();
								if (scalar(@pnums) > 0) {
									print "Found open UDP ports in nmap data.\n";
								}
								### os records
								my $os = $host->os_sig();
								print Dumper($os) if (($verbose) and ($verbose > 2));
								no warnings;
								if (&record_exists($sid, $hid, 'os', $os->name())) {
									print "OS record for host and scan already exists.  Skipping....\n" if ($verbose);
								} else {
									my %params = (
										'hid'				=>	$hid,
										'sid'				=>	$sid,
										'os_name'			=>	$os->name(),
										'os_family'			=>	$os->osfamily(),
										'os_gen'			=>	$os->osgen(),
										'os_type'			=>	$os->type(),
										'os_vendor'			=>	$os->vendor(),
										'class_accuracy'	=>	$os->class_accuracy(),
									);
									my $rtv = &insert_os_record(\%params);
									print "insert_os_record::RTV: $rtv\n" if ($verbose);
								}
								use warnings;
							}	# end foreach my $host...
						}	# end when (mysql)
# 					}	# end given($dbtype)
				}
			### csv
			} else {	# output CSV format
				# (default output to csv)
				open CSV, ">$output" or die "Couldn't open output file ($output): $!";
				print CSV "IP,Hostname,OS Guess,Accuracy,Host Status,Open Ports,Start Time\n";
				foreach my $h ( @nmap_hosts ) {
					print Dumper($h) if (($verbose) and ($verbose >= 2));
					my $os = $h->os_sig();
					my $port_str;
					my @tcpports = $h->tcp_open_ports();
					my @udpports = $h->udp_open_ports();
					if (scalar(@tcpports) > 0) {
						print "\@tcpports defined\n" if (($verbose) and ($verbose > 2));
						$port_str .= "T:".join("|", @tcpports) if (($verbose) && ($verbose > 2));
					} else {
						print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
						print "No open TCP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
					}
					if (scalar(@udpports) > 0) {
						print "\@udpports defined\n" if (($verbose) and ($verbose > 2));
						$port_str .= "|".join("|", @udpports) if (($verbose) and ($verbose > 2));
					} else {
						print Dumper($h->{'ports'}) if (($verbose) and ($verbose > 2));
						print "No open UDP ports found for host (".$h->ipv4_addr().")\n" if ($verbose);
					}
					$port_str = "No open ports found" unless ($port_str);
					print CSV $h->ipv4_addr().",".$h->hostname().",".$os->name.",".$os->name_accuracy().",".$h->status().",".$port_str.",".$sess->start_str()."\n";
				}
				close CSV or die "There was a problem closing the CSV file: $! ";
			}
		} else {	# input does not exist or is zero bytes
			if ( -z $input ) {
				die "Input file is zero (0) bytes.";
			} elsif ( -d $input ) {
				die "Specified input is a directory.";
			} elsif ( ! -f $input ) {
				die "Specified input is not a file.";
			}
		}
	} else {	# must define input file
		print "You must specify an input file!\n";
		&usage();
	}	# end if (defined($input))
}	# end if (masscan)
###############################################################################
### Subs
###############################################################################

sub usage {
	print <<EoS;

Convert nmap XML data to database format specified by command options.

Usage:
$0 -hvqmue -i <input_file> -o [output_file] -t [db_type] -s [db_host] -d [db_name] -u [db_user] -p [dp_pass]

Where:
-h|--help			Prints this message then exits.
-v|--verbose			Increase output volume.
-q|--quiet			Decrease output volume.
-u|--up				Only report on hosts that are "up".
-m|--masscan			Input file is from a masscan rather than nmap.
-e|--excel			Create a Microsoft Excel 2010 and later compatible Excel file.
-i|--input			Specify the full path to the input file.
-o|--output			Specify the full path to the output file.
-t|--type			Specify the database type.  Currently only accepts 'mysql' or 'MSSQL'.
-s|--server			Specify the database server.
-p|--port			Specify the port for the database server.  Defaults to 3306.
-d|--database			Specify the name for the database.  Defaults to 'nmap_data'.
-u|--user			Specify the username for the database.
-p|--pass			Specify the password for the database.

Note: Excel option only used with CSV output.
Note: All database options only used with mysql or mssql output.

EoS
	exit 0;
}

sub create_table {
	# database connection paramters should be accessible from here!
	my $table_name = shift;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
	my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
	my $rtv = $dbh->do($table_sql{$table_name}) or die $DBI::stderr;
	$rtv = $dbh->do("ALTER TABLE $table_name AUTO_INCREMENT = 1;") or die $DBI::stderr;
	$dbh->disconnect() or die $DBI::stderr;
	print "create_table::RTV: $rtv\n" if ($verbose);
	return $rtv;
}

sub insert_nmap_record {
	my $data_ref = shift;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
    my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
	my $rtv = $dbh->do("INSERT INTO nmap (version,xmlversion,args,types,starttime,startstr,endtime,endstr,numservices) VALUES ('$data_ref->{'version'}','$data_ref->{'xmlversion'}','$data_ref->{'args'}', '$data_ref->{'types'}', FROM_UNIXTIME($data_ref->{'starttime'}), '$data_ref->{'startstr'}', FROM_UNIXTIME($data_ref->{'endtime'}), '$data_ref->{'endstr'}', '$data_ref->{'numservices'}')");
	print "insert_nmap_record::RTV: $rtv\n" if ($verbose);
	return $rtv;
}

sub insert_host_record {
	my $data_ref = shift;
	foreach my $key ( sort keys %{$data_ref} ) { 
		if ((!defined($data_ref->{$key})) or ($data_ref->{$key} eq '')) { 
			if ($key eq 'hostname') {
				$data_ref->{$key} = 'UNRESOLVED';
			} else {
				$data_ref->{$key} = 'NULL'; 
			}
		}
	}
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
    my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
    print Dumper($data_ref) if (($verbose) and ($verbose > 2));
    no warnings;
    my $sql = "INSERT INTO hosts (sid,ip4,ip4num,hostname,status,tcpcount,udpcount,mac,vendor,ip6,distance,uptime,upstr) VALUES ('$data_ref->{'sid'}','$data_ref->{'ip4'}','[ip4num]','$data_ref->{'hostname'}','$data_ref->{'status'}','$data_ref->{'tcpcount'}','$data_ref->{'udpcount'}','$data_ref->{'mac'}','$data_ref->{'vendor'}','$data_ref->{'ip6'}','$data_ref->{'distance'}','$data_ref->{'uptime'}','$data_ref->{'upstr'}')";
    use warnings;
    print "insert_)host_record::SQL: $sql\n" if ($verbose);
	my $rtv = $dbh->do("$sql");
	print "insert_host_record::RTV: $rtv\n" if ($verbose);
	return $rtv;
}

sub insert_seq_record {
	my $data_ref = shift;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
    my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
    no warnings;
	my $rtv = $dbh->do("INSERT INTO sequencing (hid,sid,tcpclass,tcpindex,tcpvalues,ipclass,ipvalues,tcptclass,tcptvalues) VALUES ('$data_ref->{'hid'}', '$data_ref->{'sid'}', '$data_ref->{'tcpsequence_class'}', '$data_ref->{'tcpsequence_index'}', '$data_ref->{'tcpsequence_values'}', '$data_ref->{'ipidsequence_class'}', '$data_ref->{'ipidsequence_values'}', '$data_ref->{'tcptsequence_class'}', '$data_ref->{'tcptsequence_values'}')");
	use warnings;
	#print "insert_seq_record::RTV: $rtv\n" if ($verbose);
	return $rtv;
}

sub insert_ports_record {
	my $data_ref = shift;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
    my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
    no warnings;
	my $rtv = $dbh->do("INSERT INTO ports (hid,sid,port,type,state,name,tunnel,product,version,extra,confidence,method,proto,owner,rpcnum,fingerprint) VALUES ('$data_ref->{'hid'}','$data_ref->{'sid'}','$data_ref->{'port_num'}','$data_ref->{'type'}','$data_ref->{'state'}','$data_ref->{'service_name'}','$data_ref->{'service_tunnel'}','$data_ref->{'product'}','$data_ref->{'version'}','$data_ref->{'extra'}','$data_ref->{'confidence'}','$data_ref->{'method'}','$data_ref->{'proto'}','$data_ref->{'owner'}','$data_ref->{'rpcnum'}','".quotemeta($data_ref->{'fingerprint'})."')");
	use warnings;
	#print "insert_ports_record::RTV: $rtv\n" if ($verbose);
	return $rtv;
}

sub insert_os_record {
	my $data_ref = shift;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
    my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
    no warnings;
	my $rtv = $dbh->do("INSERT INTO os (hid,sid,name,family,generation,type,vendor,accuracy) VALUES ('$data_ref->{'hid'}', '$data_ref->{'sid'}', '$data_ref->{'os_name'}', '$data_ref->{'os_family'}', '$data_ref->{'os_gen'}', '$data_ref->{'os_type'}', '$data_ref->{'os_vendor'}', '$data_ref->{'class_accuracy'}')");
	use warnings;
	print "insert_os_record::RTV: $rtv\n" if ($verbose);
	return $rtv;
}

sub check_scan_record {
	my $args_str = shift;
	my $startstr = shift;
	my $endstr = shift;
	my $retval = 0;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
	my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
	my $sql = "SELECT sid FROM nmap WHERE args='$args_str' AND startstr='$startstr' AND endstr='$endstr'";
	print "SQL: $sql\n" if ($verbose);
	my $sth = $dbh->prepare("$sql") or die $DBI::stderr;
	my $rtv = $sth->execute();
	print "check_scan_record::RTV:$rtv\n" if (($verbose) and ($verbose > 1));
	while (my @row = $sth->fetchrow_array()) {
		$retval = $row[0];
	}
	$sth->finish() or die $DBI::stderr;
	$dbh->disconnect or die $DBI::stderr;
	return $retval;
}

sub check_host_record {
	my $sid = shift;
	my $ip4 = shift;
	my $hostname = shift;
	my $retval = 0;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
	my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
	my $sth = $dbh->prepare("SELECT hid FROM hosts WHERE sid='$sid' and ip4='$ip4' AND hostname='$hostname'") or die $DBI::stderr;
	my $rtv = $sth->execute() or die $DBI::stderr;
	print "check_host_record::RTV: $rtv\n" if ($verbose);
	while (my @row = $sth->fetchrow_array()) {
		$retval = $row[0];
	}
	$sth->finish() or die $DBI::stderr;
	$dbh->disconnect() or die $DBI::stderr;
	return $retval;
}

sub check_port_record {
	my $hid = shift;
	my $sid = shift;
	my $portnum = shift;
	my $portstate = shift;
	my $portproto = shift;
	my $retval = 0;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
	my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
	no warnings;
	my $sth = $dbh->prepare("SELECT hid FROM ports WHERE hid='$hid' AND sid='$sid' AND port='$portnum' AND state='$portstate' AND proto='$portproto';");
	use warnings;
	$sth->execute();
	while (my @row = $sth->fetchrow_array()) {
		$retval = $row[0];
		last;
	}
	$sth->finish();
	$dbh->disconnect();
	return $retval;
}

sub record_exists {
	my $hid = shift; 
	my $sid = shift;
	my $rec_type = shift;
	my $extra = shift;
	no warnings;
	my $retval = 0;
	my %sql = (
		'sequencing'	=>	"SELECT hid FROM sequencing WHERE hid='$hid' AND sid='$sid' AND tcpclass='$extra'",
		'os'			=>	"SELECT hid FROM os WHERE hid='$hid' AND sid='$sid' AND name='$extra'",
	);
	use warnings;
	my $dsn = "DBI:mysql:database=$dbname:host=$dbhost:port=$dbport";
	my $dbh = DBI->connect($dsn, $dbuser, $dbpass) or die $DBI::stderr;
	my $sth = $dbh->prepare($sql{$rec_type}) or die $DBI::stderr;
	$sth->execute() or die $DBI::stderr;
	while (my @row = $sth->fetchrow_array()) {
		$retval = 1 if (@row);
	}
	$sth->finish or die $DBI::stderr;
	$dbh->disconnect or die $DBI::stderr;
	return $retval;
}
